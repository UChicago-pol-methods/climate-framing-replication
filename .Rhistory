dm_party*treatment_value_5 +
dm_pre*treatment_value_5 +
dm_religiosity*treatment_value_6 +
dm_sciconf*treatment_value_6 +
dm_econreas*treatment_value_6 +
dm_party*treatment_value_6 +
dm_pre*treatment_value_6,
data=treat_data, se_type="HC3")
lm(avg_policy_support ~
dm_religiosity*treatment_value_1 +
dm_sciconf*treatment_value_1 +
dm_econreas*treatment_value_1 +
dm_party*treatment_value_1 +
dm_pre*treatment_value_1 +
dm_religiosity*treatment_value_2 +
dm_sciconf*treatment_value_2 +
dm_econreas*treatment_value_2 +
dm_party*treatment_value_2 +
dm_pre*treatment_value_2 +
dm_religiosity*treatment_value_3 +
dm_sciconf*treatment_value_3 +
dm_econreas*treatment_value_3 +
dm_party*treatment_value_3 +
dm_pre*treatment_value_3 +
dm_religiosity*treatment_value_4 +
dm_sciconf*treatment_value_4 +
dm_econreas*treatment_value_4 +
dm_party*treatment_value_4 +
dm_pre*treatment_value_4 +
dm_religiosity*treatment_value_5 +
dm_sciconf*treatment_value_5 +
dm_econreas*treatment_value_5 +
dm_party*treatment_value_5 +
dm_pre*treatment_value_5 +
dm_religiosity*treatment_value_6 +
dm_sciconf*treatment_value_6 +
dm_econreas*treatment_value_6 +
dm_party*treatment_value_6 +
dm_pre*treatment_value_6,
data=treat_data, se_type="HC3")
?lm
mean(treat_data$ScientificConfidence)
treat_data$dm_religiosity <- treat_data$Religiosity - mean(treat_data$Religiosity, na.rm=TRUE)
treat_data$dm_sciconf <- treat_data$ScientificConfidence - mean(treat_data$ScientificConfidence, na.rm=TRUE)
treat_data$dm_econreas <- treat_data$Economic_Reasoning - mean(treat_data$Economic_Reasoning, na.rm=TRUE)
treat_data$dm_pre <- treat_data$pre_avg_policy_support - mean(treat_data$pre_avg_policy_support, na.rm=TRUE)
treat_data$dm_party <- treat_data$party_cov - mean(treat_data$party_cov, na.rm=TRUE)
lm(avg_policy_support ~
dm_religiosity*treatment_value_1 +
dm_sciconf*treatment_value_1 +
dm_econreas*treatment_value_1 +
dm_party*treatment_value_1 +
dm_pre*treatment_value_1 +
dm_religiosity*treatment_value_2 +
dm_sciconf*treatment_value_2 +
dm_econreas*treatment_value_2 +
dm_party*treatment_value_2 +
dm_pre*treatment_value_2 +
dm_religiosity*treatment_value_3 +
dm_sciconf*treatment_value_3 +
dm_econreas*treatment_value_3 +
dm_party*treatment_value_3 +
dm_pre*treatment_value_3 +
dm_religiosity*treatment_value_4 +
dm_sciconf*treatment_value_4 +
dm_econreas*treatment_value_4 +
dm_party*treatment_value_4 +
dm_pre*treatment_value_4 +
dm_religiosity*treatment_value_5 +
dm_sciconf*treatment_value_5 +
dm_econreas*treatment_value_5 +
dm_party*treatment_value_5 +
dm_pre*treatment_value_5 +
dm_religiosity*treatment_value_6 +
dm_sciconf*treatment_value_6 +
dm_econreas*treatment_value_6 +
dm_party*treatment_value_6 +
dm_pre*treatment_value_6, data=treat_data, se_type="HC3")
lm_robust(avg_policy_support ~
dm_religiosity*treatment_value_1 +
dm_sciconf*treatment_value_1 +
dm_econreas*treatment_value_1 +
dm_party*treatment_value_1 +
dm_pre*treatment_value_1 +
dm_religiosity*treatment_value_2 +
dm_sciconf*treatment_value_2 +
dm_econreas*treatment_value_2 +
dm_party*treatment_value_2 +
dm_pre*treatment_value_2 +
dm_religiosity*treatment_value_3 +
dm_sciconf*treatment_value_3 +
dm_econreas*treatment_value_3 +
dm_party*treatment_value_3 +
dm_pre*treatment_value_3 +
dm_religiosity*treatment_value_4 +
dm_sciconf*treatment_value_4 +
dm_econreas*treatment_value_4 +
dm_party*treatment_value_4 +
dm_pre*treatment_value_4 +
dm_religiosity*treatment_value_5 +
dm_sciconf*treatment_value_5 +
dm_econreas*treatment_value_5 +
dm_party*treatment_value_5 +
dm_pre*treatment_value_5 +
dm_religiosity*treatment_value_6 +
dm_sciconf*treatment_value_6 +
dm_econreas*treatment_value_6 +
dm_party*treatment_value_6 +
dm_pre*treatment_value_6, data=treat_data, se_type="HC3")
lm_robust(avg_policy_support ~
dm_religiosity*treatment_value_1 +
dm_sciconf*treatment_value_1 +
dm_econreas*treatment_value_1 +
dm_party*treatment_value_1 +
dm_pre*treatment_value_1 +
dm_religiosity*treatment_value_2 +
dm_sciconf*treatment_value_2 +
dm_econreas*treatment_value_2 +
dm_party*treatment_value_2 +
dm_pre*treatment_value_2 +
dm_religiosity*treatment_value_3 +
dm_sciconf*treatment_value_3 +
dm_econreas*treatment_value_3 +
dm_party*treatment_value_3 +
dm_pre*treatment_value_3 +
dm_religiosity*treatment_value_4 +
dm_sciconf*treatment_value_4 +
dm_econreas*treatment_value_4 +
dm_party*treatment_value_4 +
dm_pre*treatment_value_4 +
dm_religiosity*treatment_value_5 +
dm_sciconf*treatment_value_5 +
dm_econreas*treatment_value_5 +
dm_party*treatment_value_5 +
dm_pre*treatment_value_5 +
dm_religiosity*treatment_value_6 +
dm_sciconf*treatment_value_6 +
dm_econreas*treatment_value_6 +
dm_party*treatment_value_6 +
dm_pre*treatment_value_6, data=treat_data, se_type="HC3")
mod3 <- lm_robust(avg_policy_support ~
dm_religiosity*treatment_value_1 +
dm_sciconf*treatment_value_1 +
dm_econreas*treatment_value_1 +
dm_party*treatment_value_1 +
dm_pre*treatment_value_1 +
dm_religiosity*treatment_value_2 +
dm_sciconf*treatment_value_2 +
dm_econreas*treatment_value_2 +
dm_party*treatment_value_2 +
dm_pre*treatment_value_2 +
dm_religiosity*treatment_value_3 +
dm_sciconf*treatment_value_3 +
dm_econreas*treatment_value_3 +
dm_party*treatment_value_3 +
dm_pre*treatment_value_3 +
dm_religiosity*treatment_value_4 +
dm_sciconf*treatment_value_4 +
dm_econreas*treatment_value_4 +
dm_party*treatment_value_4 +
dm_pre*treatment_value_4 +
dm_religiosity*treatment_value_5 +
dm_sciconf*treatment_value_5 +
dm_econreas*treatment_value_5 +
dm_party*treatment_value_5 +
dm_pre*treatment_value_5 +
dm_religiosity*treatment_value_6 +
dm_sciconf*treatment_value_6 +
dm_econreas*treatment_value_6 +
dm_party*treatment_value_6 +
dm_pre*treatment_value_6, data=treat_data, se_type="HC3")
summary(mod3)
?colMeans
model1 <- lm_lin(avg_policy_support ~ treatment_value,
~ Religiosity + ScientificConfidence + party_cov + Economic_Reasoning + pre_avg_policy_support,
data=treat_data, se_type="HC3")
summary(model1)
colMeans(treat_data$pre_avg_policy_support)
colMeans(treat_data)
# pretest response for control (in [0, 3])
treat_data$pre_avg_policy_support <- rowMeans(sapply(data[,c('GasTax',
'CarbTax',
'Treaty',
'RegCarb')], as.numeric),
na.rm=TRUE)
colMeans(treat_data$pre_avg_policy_support)
colMeans(treat_data$pre_avg_policy_support, treat_data$Religiosity)
colMeans(treat_data[, c("pre_avg_policy_support", "Religiosity")])
mean(treat_data$Religiosity, na.rm=TRUE)
mean(treat_data$pre_avg_policy_support, na.rm=TRUE)
mean(treat_data$party_cov, na.rm=TRUE)
colMeans(treat_data[, c("pre_avg_policy_support", "Religiosity", "party_cov")])
colMeans(treat_data[, c("pre_avg_policy_support", "Religiosity", "party_cov", "ScientificConfidence", "Economic_Reasoning")])
?sweep
?lm_lin
model1
model1$scaled_center
colMeans(treat_data[, c("pre_avg_policy_support", "Religiosity", "party_cov", "ScientificConfidence", "Economic_Reasoning")])
mean(treat_data$pre_avg_policy_support, na.rm=TRUE)
mean(treat_data$Religiosity, na.rm=TRUE)
mean(treat_data$party_cov, na.rm=TRUE)
###
# Initialize as non-demeaned
demeaned_covars <-
design_matrix[
,
setdiff(colnames(design_matrix), c(design_mat_treatment, "(Intercept)")),
drop = FALSE
]
model1$weighted
model1$df
model1$term
summary(model1)
?sweep
sweep(treat_data[, c("Religiosity", "ScientificConfidence", "party_cov", "Economic_Reasoning")], 2, center)
center <- colMeans(treat_data[, c("Religiosity", "ScientificConfidence", "party_cov", "Economic_Reasoning")])
center
sweep(treat_data[, c("Religiosity", "ScientificConfidence", "party_cov", "Economic_Reasoning")], 2, center)
treat_data[covariates] <- sapply(data[covariates], as.numeric, na.rm=TRUE)?
model1 <- lm_lin(avg_policy_support ~ treatment_value,
~ Religiosity + ScientificConfidence + party_cov + Economic_Reasoning + pre_avg_policy_support,
data=treat_data, se_type="HC3")
treat_data[covariates] <- sapply(data[covariates], as.numeric)?
model1 <- lm_lin(avg_policy_support ~ treatment_value,
~ Religiosity + ScientificConfidence + party_cov + Economic_Reasoning + pre_avg_policy_support,
data=treat_data, se_type="HC3")
treat_data[covariates] <- sapply(data[covariates], as.numeric, na.rm=TRUE)?
model1 <- lm_lin(avg_policy_support ~ treatment_value,
~ Religiosity + ScientificConfidence + party_cov + Economic_Reasoning + pre_avg_policy_support,
data=treat_data, se_type="HC3")
summary(model1)
treat_data[covariates] <- sapply(data[covariates], as.numeric, na.rm=TRUE)?
model1 <- lm_lin(avg_policy_support ~ treatment_value,
~ Religiosity + ScientificConfidence + party_cov + Economic_Reasoning + pre_avg_policy_support,
data=treat_data, se_type="HC3")
# unsure if I am encoding variables for treatment conditions correctly
# for now creating indicator variable per treatment condition
treat_data <- data.frame(data)
for (i in seq(0, 6)) {
treat_data[paste("treatment_value", i, sep="_")] <- data$treatment_value == i
}
# pretest response for control (in [0, 3])
treat_data$pre_avg_policy_support <- rowMeans(sapply(data[,c('GasTax',
'CarbTax',
'Treaty',
'RegCarb')], as.numeric),
na.rm=TRUE)
# leaving political_views out for now because of multicollinearity with party_cov
# treat pre-test response like covariate
covariates <- c("Religiosity", "ScientificConfidence", "party_cov", "Economic_Reasoning")
treat_data[covariates] <- sapply(data[covariates], as.numeric, na.rm=TRUE)?
model1 <- lm_lin(avg_policy_support ~ treatment_value,
~ Religiosity + ScientificConfidence + party_cov + Economic_Reasoning + pre_avg_policy_support,
data=treat_data, se_type="HC3")
treat_data[covariates] <- sapply(data[covariates], as.numeric, na.rm=TRUE)
model1 <- lm_lin(avg_policy_support ~ treatment_value,
~ Religiosity + ScientificConfidence + party_cov + Economic_Reasoning + pre_avg_policy_support,
data=treat_data, se_type="HC3")
summary(model1)
treat_data[covariates] <- sapply(data[covariates], as.numeric)
model1 <- lm_lin(avg_policy_support ~ treatment_value,
~ Religiosity + ScientificConfidence + party_cov + Economic_Reasoning + pre_avg_policy_support,
data=treat_data, se_type="HC3")
summary(model1)
model1$scaled_center
colMeans(treat_data[, c("pre_avg_policy_support", "Religiosity", "party_cov", "ScientificConfidence", "Economic_Reasoning")])
?colMeans
model1$vcov
model1$contrasts
model1$outcome
model1$xlevels
model1$nobs
model1$statistic
model1$clustered
model1$call
model1$k
model1$fitted.values
#'   library(margins)
#'   lmlout <- lm_lin(y ~ z_block, ~ x, data = dat)
#'   summary(margins(lmlout))
#'
#'   # Can output results using 'texreg'
#'   library(texreg)
#'   texregobj <- extract(lmlout)
#' }
#'
#' @export
lm_lin <- function(formula,
covariates,
data,
weights,
subset,
clusters,
se_type = NULL,
ci = TRUE,
alpha = .05,
return_vcov = TRUE,
try_cholesky = FALSE) {
# ----------
# Check arguments
# ----------
if (length(all.vars(f_rhs(formula))) > 1) {
stop(
"The `formula` argument, `", format(formula), "`, must only have the ",
"treatment variable on the right-hand side of the formula. Covariates ",
"should be specified in the `covariates` argument like so:\n`covariates = ",
paste0("~ ", paste(all.vars(f_rhs(formula))[-1], sep = " + ")), "`.",
"\n\n See ?lm_lin."
)
}
if (!inherits(covariates, "formula")) {
stop(
"The `covariates` argument must be specified as a formula:\n",
"You passed an object of class ", class(covariates)
)
}
cov_terms <- terms(covariates)
# Check covariates is right hand sided fn
if (attr(cov_terms, "response") != 0) {
stop(
"Must not specify a response variable in `covariates`` formula.\n",
"`covariates` must be a right-sided formula, such as '~ x1 + x2 + x3'"
)
}
if (length(attr(cov_terms, "order")) == 0) {
stop(
"`covariates` must have a variable on the right-hand side, not 0 or 1"
)
}
# ----------
# Get design matrix including `covariates` for centering
# ----------
full_formula <- update(
formula,
reformulate(c(".", labels(cov_terms)))
)
datargs <- enquos(
formula = full_formula,
weights = weights,
subset = subset,
cluster = clusters
)
data <- enquo(data)
model_data <- clean_model_data(data = data, datargs)
outcome <- as.matrix(model_data$outcome)
n <- nrow(outcome)
design_matrix <- model_data$design_matrix
weights <- model_data$weights
cluster <- model_data$cluster
# Get treatment columns
has_intercept <- attr(terms(formula), "intercept")
treat_col <- which(attr(design_matrix, "assign") == 1)
treatment <- design_matrix[, treat_col, drop = FALSE]
design_mat_treatment <- colnames(design_matrix)[treat_col]
# Check case where treatment is not factor and is not binary
if (any(!(treatment %in% c(0, 1)))) {
# create dummies for non-factor treatment variable
# Drop out first group if there is an intercept
vals <- sort(unique(treatment))
if (has_intercept) vals <- vals[-1]
n_treats <- length(vals)
# Could warn if there are too many values
# (i.e., if there are as many treatments as observations)
names(vals) <- paste0(colnames(design_matrix)[treat_col], vals)
# Create matrix of dummies
treatment <-
outer(
drop(treatment),
vals,
function(x, y) as.numeric(x == y)
)
}
# ----------
# Center and interact variables
# ----------
# Initialize as non-demeaned
demeaned_covars <-
design_matrix[
,
setdiff(colnames(design_matrix), c(design_mat_treatment, "(Intercept)")),
drop = FALSE
]
# Choose what to center on!
if (is.numeric(weights)) {
center <- apply(demeaned_covars, 2, weighted.mean, weights)
} else {
center <- colMeans(demeaned_covars)
}
demeaned_covars <- sweep(demeaned_covars, 2, center)
original_covar_names <- colnames(demeaned_covars)
# Change name of centered covariates to end in "_c"
# If covar name has `:` or a `(` not in the first position,
# wrap the whole var name in parentheses first
colnames(demeaned_covars) <- paste0(
ifelse(grepl("\\:|(^.+\\()", colnames(demeaned_covars)),
paste0("(", colnames(demeaned_covars), ")"),
colnames(demeaned_covars)),
"_c"
)
n_treat_cols <- ncol(treatment)
n_covars <- ncol(demeaned_covars)
# Interacted
# n_int_covar_cols <- n_covars * (n_treat_cols + has_intercept)
n_int_covar_cols <- n_covars * (n_treat_cols)
interacted_covars <- matrix(0, nrow = n, ncol = n_int_covar_cols)
interacted_covars_names <- character(n_int_covar_cols)
for (i in 1:n_covars) {
covar_name <- colnames(demeaned_covars)[i]
cols <- (i - 1) * n_treat_cols + (1:n_treat_cols)
interacted_covars[, cols] <- treatment * demeaned_covars[, i]
interacted_covars_names[cols] <- paste0(colnames(treatment), ":", covar_name)
}
colnames(interacted_covars) <- interacted_covars_names
if (has_intercept) {
# Have to manually create intercept if treatment wasn't a factor
X <- cbind(
matrix(1, nrow = n, ncol = 1, dimnames = list(NULL, "(Intercept)")),
treatment,
demeaned_covars,
interacted_covars
)
} else {
# If no intercept, but treatment is only one column,
# need to add base terms for covariates
if (n_treat_cols == 1) {
X <- cbind(
treatment,
demeaned_covars,
interacted_covars
)
} else {
X <- cbind(
treatment,
interacted_covars
)
}
}
# ----------
# Estimation
# ----------
return_list <-
lm_robust_fit(
y = outcome,
X = X,
weights = weights,
cluster = cluster,
ci = ci,
se_type = se_type,
alpha = alpha,
return_vcov = return_vcov,
try_cholesky = try_cholesky,
has_int = has_intercept,
iv_stage = list(0)
)
# ----------
# Build return object
# ----------
return_list <- lm_return(
return_list,
model_data = model_data,
formula = formula
)
return_list[["scaled_center"]] <- center
setNames(return_list[["scaled_center"]], original_covar_names)
return_list[["call"]] <- match.call()
return(return_list)
}
model1$vcov
View(model1$vcov)
mod3 <- lm_robust(avg_policy_support ~
dm_religiosity*treatment_value_1 +
dm_sciconf*treatment_value_1 +
dm_econreas*treatment_value_1 +
dm_party*treatment_value_1 +
dm_pre*treatment_value_1 +
dm_religiosity*treatment_value_2 +
dm_sciconf*treatment_value_2 +
dm_econreas*treatment_value_2 +
dm_party*treatment_value_2 +
dm_pre*treatment_value_2 +
dm_religiosity*treatment_value_3 +
dm_sciconf*treatment_value_3 +
dm_econreas*treatment_value_3 +
dm_party*treatment_value_3 +
dm_pre*treatment_value_3 +
dm_religiosity*treatment_value_4 +
dm_sciconf*treatment_value_4 +
dm_econreas*treatment_value_4 +
dm_party*treatment_value_4 +
dm_pre*treatment_value_4 +
dm_religiosity*treatment_value_5 +
dm_sciconf*treatment_value_5 +
dm_econreas*treatment_value_5 +
dm_party*treatment_value_5 +
dm_pre*treatment_value_5 +
dm_religiosity*treatment_value_6 +
dm_sciconf*treatment_value_6 +
dm_econreas*treatment_value_6 +
dm_party*treatment_value_6 +
dm_pre*treatment_value_6, data=treat_data, se_type="HC3")
summary(mod3)
summary(model1)
model1$scaled_center
colMeans(treat_data[, covariates])
colMeans(treat_data[, c(covariates, "pre_avg_policy_support")])
colMeans(treat_data[, c(covariates, "pre_avg_policy_support")], na.rm=TRUE)
# Note: compared to Python version, slightly different due to lm_lin() having a
# different method of centering covariates
colMeans(treat_data[, c(covariates, "pre_avg_policy_support")], na.rm=TRUE)
model1$scaled_center
#' Note: compared to Python version, the estimates for coefficients are slightly different due to lm_lin() having a different method of centering covariates
colMeans(treat_data[, c(covariates, "pre_avg_policy_support")], na.rm=TRUE)
